{"version":3,"sources":["SortingAlgoVisualizer/SortingAlgoVisualizer.js","algorithms/mergeSort.js","App.js","serviceWorker.js","index.js"],"names":["v","mergeSort","arr","start","end","copyArray","animations","mid","Math","floor","merge","x","a","b","push","MergeSort","array","length","slice","randomIntGenerator","min","max","random","vh","h","document","documentElement","clientHeight","window","innerHeight","vw","w","clientWidth","innerWidth","console","log","vmax","SortingAlgoVisualizer","props","useState","setArray","arraySize","useEffect","resetArray","i","className","map","value","id","key","style","height","onClick","arrayBars","getElementsByClassName","firstBarIndex","secondBarIndex","firstBarStyle","secondBarStyle","color","setTimeout","backgroundColor","setNewBarHeight","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.afc60fd9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './SortingAlgoVisualizer.css';\r\nimport MergeSort from '../algorithms/mergeSort';\r\n\r\nconst SortingAlgoVisualizer = (props) => {\r\n\t//CONSTANTS\r\n\tconst ANIMATION_SPEED = 1;\r\n\tconst PRIMARY_COLOR = 'blue';\r\n\tconst SECONDARY_COLOR = 'red';\r\n\r\n\tconst [count, setCount] = useState(0);\r\n\tconst [array, setArray] = useState([]);\r\n\t//const [arraySize, setArraySize] = useState(0)\r\n\r\n\tconst arraySize = vw(95) / 4;\r\n\r\n\tuseEffect(() => {\r\n\t\tresetArray();\r\n\t\treturn () => {};\r\n\t}, []);\r\n\r\n\tconst resetArray = () => {\r\n\t\tconst array = [];\r\n\t\tfor (let i = 0; i < arraySize; i++) {\r\n\t\t\tarray.push(randomIntGenerator(5, Math.floor(vh(83))));\r\n\t\t}\r\n\t\tsetArray(array);\r\n\t};\r\n\r\n\t// Method used for animating merge sort algorithm\r\n\tconst mergeSort = () => {\r\n\t\tconst animations = MergeSort(array);\r\n\t\tfor (let i = 0; i < animations.length; i++) {\r\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\t\tconst colorChange = i % 3 !== 2;\r\n\t\t\tif (colorChange) {\r\n\t\t\t\tconst [firstBarIndex, secondBarIndex] = animations[i];\r\n\t\t\t\tconst firstBarStyle = arrayBars[firstBarIndex].style;\r\n\t\t\t\tconst secondBarStyle = arrayBars[secondBarIndex].style;\r\n\t\t\t\tconst color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tfirstBarStyle.backgroundColor = color;\r\n\t\t\t\t\tsecondBarStyle.backgroundColor = color;\r\n\t\t\t\t}, i * ANIMATION_SPEED);\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tconst [firstBarIndex, setNewBarHeight] = animations[i];\r\n\t\t\t\t\tconst firstBarStyle = arrayBars[firstBarIndex].style;\r\n\t\t\t\t\tfirstBarStyle.height = `${setNewBarHeight}px`;\r\n\t\t\t\t}, i * ANIMATION_SPEED);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst bubbleSort = () => {};\r\n\r\n\tconst heapSort = () => {};\r\n\r\n\tconst quickSort = () => {};\r\n\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t<div className='content'>\r\n\t\t\t\t<div className='array-container'>\r\n\t\t\t\t\t{array.map((value, id) => (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName='array-bar'\r\n\t\t\t\t\t\t\tkey={id}\r\n\t\t\t\t\t\t\tstyle={{ height: `${value}px` }}\r\n\t\t\t\t\t\t></div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className='dashboard'>\r\n\t\t\t\t<button onClick={() => resetArray()}>New Random Array</button>\r\n\t\t\t\t<button onClick={() => mergeSort()}>Merge Sort</button>\r\n\t\t\t\t<button onClick={() => bubbleSort()}>Bubble Sort</button>\r\n\t\t\t\t<button onClick={() => heapSort()}>Heap Sort</button>\r\n\t\t\t\t<button onClick={() => quickSort()}>Quick Sort</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst randomIntGenerator = (min, max) => {\r\n\treturn Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n//Viewport calculators\r\n\r\nconst vh = (v) => {\r\n\tvar h = Math.max(\r\n\t\tdocument.documentElement.clientHeight,\r\n\t\twindow.innerHeight || 0\r\n\t);\r\n\treturn Math.floor((v * h) / 100);\r\n};\r\n\r\nconst vw = (v) => {\r\n\tvar w = Math.max(\r\n\t\tdocument.documentElement.clientWidth,\r\n\t\twindow.innerWidth || 0\r\n\t);\r\n\treturn Math.floor((v * w) / 100);\r\n};\r\n\r\nconst vmin = (v) => {\r\n\treturn Math.min(vh(v), vw(v));\r\n};\r\n\r\nconst vmax = (v) => {\r\n\treturn Math.max(vh(v), vw(v));\r\n};\r\n\r\n//Logging values\r\n\r\nconsole.log(\r\n\tvh(20),\r\n\tMath.max(\r\n\t\tdocument.documentElement.clientHeight,\r\n\t\twindow.innerHeight || 0\r\n\t)\r\n);\r\nconsole.log(\r\n\tvw(30),\r\n\tMath.max(\r\n\t\tdocument.documentElement.clientWidth,\r\n\t\twindow.innerWidth || 0\r\n\t)\r\n);\r\nconsole.log(vmin(20));\r\nconsole.log(vmax(20));\r\n\r\nexport default SortingAlgoVisualizer;\r\n","//Top-Down mergeSort\r\nconst MergeSort = (array) => {\r\n\tconst animations = [];\r\n\tif (array.length <= 1) return array;\r\n\tconst copyArray = array.slice();\r\n\tmergeSort(array, 0, array.length - 1, copyArray, animations);\r\n\treturn animations;\r\n};\r\n\r\nconst mergeSort = (arr, start, end, copyArray, animations) => {\r\n\tif (start === end) return;\r\n\tconst mid = Math.floor((start + end) / 2);\r\n\tmergeSort(copyArray, start, mid, arr, animations);\r\n\tmergeSort(copyArray, mid + 1, end, arr, animations);\r\n\tmerge(arr, start, mid, end, copyArray, animations);\r\n};\r\n\r\nconst merge = (arr, start, mid, end, copyArray, animations) => {\r\n\tlet x = start;\r\n\tlet a = start;\r\n\tlet b = mid + 1;\r\n\twhile (a <= mid && b <= end) {\r\n\t\tanimations.push([a, b]);\r\n\t\tanimations.push([a, b]);\r\n\t\tif (copyArray[a] <= copyArray[b]) {\r\n\t\t\tanimations.push([x, copyArray[a]]);\r\n\t\t\tarr[x++] = copyArray[a++];\r\n\t\t} else {\r\n\t\t\tanimations.push([x, copyArray[b]]);\r\n\t\t\tarr[x++] = copyArray[b++];\r\n\t\t}\r\n\t}\r\n\twhile (a <= mid) {\r\n\t\tanimations.push([a, a]);\r\n\t\tanimations.push([a, a]);\r\n\t\tanimations.push([x, copyArray[a]]);\r\n\t\tarr[x++] = copyArray[a++];\r\n\t}\r\n\twhile (b <= end) {\r\n\t\tanimations.push([b, b]);\r\n\t\tanimations.push([b, b]);\r\n\t\tanimations.push([x, copyArray[b]]);\r\n\t\tarr[x++] = copyArray[b++];\r\n\t}\r\n};\r\n\r\nexport default MergeSort;\r\n","import React from 'react';\nimport SortingAlgoVisualizer from './SortingAlgoVisualizer/SortingAlgoVisualizer';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<SortingAlgoVisualizer></SortingAlgoVisualizer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}